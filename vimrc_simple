" 操作系统、编码设置 
silent function! OSX()
    return  has('macunix')
endfunction
silent function! LINUX()
    return has('unix') && !has('maxunix') && !has('win32unix')
endfunction
silent function! WINDOWS()
    return (has('win32') || has('win64'))
endfunction


" ===========================================
" => 快捷键 
" ===========================================
" 设置leader
let mapleader=","
let g:mapleader=","

" 快速保存
noremap `	:w!<cr>

" 快速退出
noremap q   <ESC>:q!<CR>
noremap qa	<ESC>:qa!<CR>

" 行首 行尾
noremap A   ^
noremap E   $

" ; -> :
noremap ; :

" 可视列模式
noremap <F2>    <C-v>

" 打开交换文件
noremap <F7>    :vi#<cr>

" 关闭quickwindow
noremap cl   :ccl<cr>

" 插入文件头 函数头
noremap <F9>    :call Setfilehead()<cr>

" 插入日期
noremap <F5>    o// Date: <Esc>:read !date<CR>kJ
inoremap <F5>   <CR>// Date: <Esc>:read !date<CR>kJ

" 查找当前光标的单词，并在quickfix窗口显示在什么地方出现了
noremap <silent><leader>g   :vimgrep <C-R>=expand("<cword>")<CR> %<CR>:copen<cr>

" 查找当前光标下的单词，支持跳转
noremap <silent><Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr . "[\t"<CR>

" 显示当前缓冲区
noremap <F8>	:ls<CR>:let WinId = input("Which buffer: ")<Bar>exe "normal buffer " . WinId<CR>

" 标签设置
noremap <C-n>	:tabN<cr>
noremap <C-f>	:tabp<cr>
noremap te		:tabedit 
noremap <silent><Leader>dd	:tabclose<cr>

" ===========================================
" => 基本设置
" ===========================================
" 显示行号
set number	
highlight lineNr cterm=NONE ctermfg=249 ctermbg=240 guifg=LightYellow guibg=Grey
" 保存历史记录
set history=700		
" 根据文件类型 启用插件
filetype plugin on
filetype indent on
" 移动时候，距离上下的距离
set so=5
" wildmenu 命令补全时候  C-p/n
set wildmenu
" wildmenu中忽略的文件类型
set wildignore=*.o,*~,~.pyc
" 显示当前位置
set ruler
" command bar高度
set cmdheight=1
" backspace可用
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
" 搜索忽略大小写
set ignorecase
" 智能搜索
set smartcase
" 高亮搜索结果
set hlsearch
" 搜索时 及时匹配
set incsearch
" 显示匹配括号
set showmatch
" 2s闪烁一下
set mat=2
" 不要错误警告声
set noerrorbells
set novisualbell
set t_vb=
set tm=500
" 插入模式下可以滚屏 鼠标可用
set mouse=i
" 鼠标隐藏
set mousehide
" 显示下划线(会花屏) 只在gui模式下使用
colorscheme desert
set background=dark
if has('gui_running')
	set cul
	highlight CursorLine  cterm=NONE ctermbg=black ctermfg=green guibg=black guifg=green
endif

" 允许光标到最后一个位置
set virtualedit=onemore
" 中文文档
set helplang=cn
" ===========================================
" => Colors and Fonts
" ===========================================
" 打开语法检查
syntax enable

" gui界面设置
if has("gui_running")
	set guioptions-=T
	set guioptions+=e
	set t_Co=256
	set guitablabel=%M\ %t
    set guifont=Courier_New:h18
    if OSX()
        set guioptions-=T
        set guioptions-=m
    else
        set go=
    endif
endif


se modifiable

" 使用utf8编码
set encoding=utf-8
if WINDOWS()
	set termencoding=gbk
else
	set termencoding=utf-8  " 终端编码
endif
set fileencoding=utf-8
set fileencodings=utf-8,ucs-bom,chinese,cp930,GBK

" 默认文件类型unix
set ffs=unix,dos,mac

" ===========================================
" => 文件，备份文件
" ===========================================
set nobackup
set nowb
set noswapfile

" ===========================================
" => 回车 缩紧 文本相关
" ===========================================
" 空格代替tabs
" set expandtab
" 不用空格代替tabs
set noexpandtab
" 智能tab?
set smarttab
"tab = 4*spaces
set shiftwidth=4
set tabstop=4

" 500字符换行
set lbr
set tw=500

" 自动缩进 智能缩进 折行
set ai
set si
set wrap
" ===========================================
" => 可视模式下相关设置
" ===========================================
vnoremap <silent><leader>g  :call VisualSelection('g')<cr>
vnoremap <silent><leader>r :call VisualSelection('replace')<cr>
" ===========================================
" 窗口移动
map <C-j>	<C-W>j
map <C-k>	<C-W>k
map <C-h>	<C-W>h
map <C-l>	<C-W>l

" 关闭当前缓冲区
map <leader>bd	:Bclose<cr>
" 关闭所有缓冲区
map <leader>ba :1,1000 bd!<cr>

" 回到上次编辑的地方
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" 关闭后记录buffer信息 
set viminfo^=%

" 总是显示状态栏
set laststatus=2

" 状态栏显示格式 
set statusline=\ %1*\ %{getcwd()}/%t%y
set statusline+=\ %2*\ %{strftime(\"%Y/%m/%d\ %H:%M\")}
set statusline+=\ %3*\ %l,%c
" 状态栏颜色
hi User1 cterm=bold ctermfg=232 ctermbg=179 guifg=Black     guibg=Yellow
hi User2 cterm=None ctermfg=214 ctermbg=242 guifg=Yellow    guibg=Brown
hi User3 cterm=None ctermfg=251 ctermbg=240 guifg=Black     guibg=DarkYellow
hi User4 cterm=bold ctermfg=169 ctermbg=239 guifg=Black     guibg=LightYellow
hi User5 cterm=None ctermfg=208 ctermbg=238 guifg=Black     guibg=LightYellow
hi User6 cterm=None ctermfg=246 ctermbg=237 guifg=Black     guibg=LightYellow
hi User7 cterm=None ctermfg=250 ctermbg=238 guifg=Black     guibg=LightYellow
hi User8 cterm=None ctermfg=249 ctermbg=240 guifg=Black     guibg=LightYellow
" ===========================================
" => 函数
" ===========================================
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

" 可视模式下搜索
function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'g'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' %<cr>')
        execute "normal copen<cr>"
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" 删除缓冲区时候 不退出 
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" 关闭缓冲区 不关闭窗口
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction


" 模板函数
function! Setfilehead()
    call append(line("."),  '/***********************************************')
    call append(line(".")+1, '*        Author: zhaojingzhen@weidian.com')
    call append(line(".")+2, '*        Create: '.strftime("%Y-%m-%d %H:%M:%S"))
    call append(line(".")+3, '*   Description: ')
    call append(line(".")+4, '*         Param: ')
    call append(line(".")+5, '*        Return: ')
    call append(line(".")+6, '***********************************************/')
endfunc

" ===========================================
" => Bundle 及插件设置
" ===========================================
" 安装插件时候首先关闭文件类型检测 最后在打开 
filetype off
set rtp+=$HOME/.vim/bundle/Vundle.vim/
call vundle#rc()
" Vundle 插件管理
Bundle 'VundleVim/Vundle.vim'
" 语法检查
Bundle 'scrooloose/syntastic'
" 自动补全括号
Bundle 'jiangmiao/auto-pairs'
" 补全
Bundle 'Shougo/neocomplcache'
" 模板补全
Bundle 'neosnippet'
" 自动弹框
Bundle 'AutoComplPop'
"  Tlist
if executable('ctags')
    Bundle 'marvelfans/taglist.vim'
endif
" 目录配置
Bundle 'scrooloose/nerdtree'
" 缓冲区设置
" Bundle 'vim-scripts/minibufexplorerpp'



"=================================================
"------插件设置-----------------------------------
"=================================================
" minibufexplorerpp 设置
" 切换缓冲区
" map <C-n>	:bn<cr>
" map <C-f>	:bp<cr>
" 关闭当前缓冲区
" map <leader>dd :Bclose<cr>

" ----- ctags 设置
set tags=./tags;/,~/.vimtags,tags

" ------------ Tlist设置
let g:Tlist_path = "$HOME/.vim/bundle/taglist.vim/"
if isdirectory(expand(g:Tlist_path))
    let g:Tlist_Show_One_File=1     " 只显示当前文件的tag
    let g:Tlist_Exit_OnlyWindow=1   " 如果最后只有Taglist窗口,则退出
    let g:Tlist_WinWidt=20          " 宽度
    let g:Tlist_Use_Right_Window=1  " 在右侧打开窗口
    " let g:Tlist_Auto_Open=1         " 自动打开
    let g:Tlist_Process_File_Always=1 " 始终解析文件

    nnoremap <silent> <leader>t :Tlist<CR>
endif

" ------------  NERDTree 设置
" 只有nerdtree窗口时，关闭
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" ,e 打开目录，并移动光标到当前窗口
noremap     <silent><leader>e   :NERDTreeToggle<Bar>execute "normal <C-l>"<CR>

" ================================================================
" ======= 补全设置(勿动)
" ================================================================
" OmniComplet 补全
if has("autocmd") && exists("+omnifunc")
    autocmd FileType *
                \if &omnifunc == "" |
                \setlocal omnifunc=syntaxcomplete#Complete |
                \endif
                \endif
endif

hi Pmenu guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
hi PmenuSbar guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermfg=lightgray cterm=NONE
hi PmenuThumb guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermfg=darkcyan cterm=NONE

inoremap <expr> <Down>  pumvisible() ? "\<C-n>" : "\<DOWN>"
inoremap <expr> <Up>    pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <C-d>   pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
inoremap <expr> <C-u>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"

au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menu,preview,longest

" neocomplcache 
let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_enable_auto_delimiter = 1
let g:neocomplcache_max_list = 15
let g:neocomplcache_force_overwrite_completefunc = 1

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns._ = '\h\w*'

" Plugin key-mappings {
" These two lines conflict with the default digraph mapping of <C-K>
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

imap <silent><expr><C-k> neosnippet#expandable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
            \ "\<C-e>" : "\<Plug>(neosnippet_expand_or_jump)")
smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)

inoremap <expr><C-g> neocomplcache#undo_completion()
inoremap <expr><C-l> neocomplcache#complete_common_string()
" inoremap <expr><CR> neocomplcache#complete_common_string()

function! CleverCr()
    if pumvisible()
        if neosnippet#expandable()
            let exp = "\<Plug>(neosnippet_expand)"
            return exp . neocomplcache#close_popup()
        else
            return neocomplcache#close_popup()
        endif
    else
        return "\<CR>"
    endif
endfunction

" <CR> close popup and save indent or expand snippet
imap <expr> <CR> CleverCr()

" <CR>: close popup
" <s-CR>: close popup and save indent.
inoremap <expr><s-CR> pumvisible() ? neocomplcache#close_popup()."\<CR>" : "\<CR>"
"inoremap <expr><CR> pumvisible() ? neocomplcache#close_popup() : "\<CR>"

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y> neocomplcache#close_popup()

" <TAB>: completion.
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.go = '\h\w*\.\?'

" 打开文件类型检测 
filetype on
